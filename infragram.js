// Generated by CoffeeScript 1.6.3
var createContext, download, drawScene, generateShader, handleLoadedTexture, img_context, initBuffers, initShaders, initTexture, map_context, setMode;

img_context = null;

map_context = null;

initBuffers = function(ctx) {
  var gl, textureCoords, vertices;
  gl = ctx.gl;
  ctx.vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, ctx.vertexBuffer);
  vertices = [-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0];
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
  ctx.vertexBuffer.itemSize = 2;
  ctx.textureBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, ctx.textureBuffer);
  textureCoords = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0];
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
  return ctx.textureBuffer.itemSize = 2;
};

createContext = function(mode, greyscale, colormap, slider, canvasName) {
  var ctx;
  ctx = new Object();
  ctx.mode = mode;
  ctx.greyscale = greyscale;
  ctx.colormap = colormap;
  ctx.slider = slider;
  ctx.canvas = document.getElementById(canvasName);
  ctx.gl = getWebGLContext(ctx.canvas);
  initBuffers(ctx);
  return ctx;
};

initShaders = function(ctx) {
  var gl;
  gl = ctx.gl;
  ctx.shaderProgram = createProgramFromScripts(gl, ["shader-vs", "shader-fs"]);
  gl.useProgram(ctx.shaderProgram);
  ctx.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(ctx.shaderProgram, "aVertexPosition");
  gl.enableVertexAttribArray(ctx.shaderProgram.vertexPositionAttribute);
  ctx.shaderProgram.textureCoordAttribute = gl.getAttribLocation(ctx.shaderProgram, "aTextureCoord");
  return gl.enableVertexAttribArray(ctx.shaderProgram.textureCoordAttribute);
};

drawScene = function(ctx, returnImage) {
  var gl, pColormap, pGreyscaleUniform, pHsvUniform, pNdviUniform, pSliderUniform;
  gl = ctx.gl;
  gl.bindBuffer(gl.ARRAY_BUFFER, ctx.vertexBuffer);
  gl.vertexAttribPointer(ctx.shaderProgram.vertexPositionAttribute, ctx.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
  gl.bindBuffer(gl.ARRAY_BUFFER, ctx.textureBuffer);
  gl.vertexAttribPointer(ctx.shaderProgram.textureCoordAttribute, ctx.textureBuffer.itemSize, gl.FLOAT, false, 0, 0);
  pSliderUniform = gl.getUniformLocation(ctx.shaderProgram, "uSlider");
  gl.uniform1f(pSliderUniform, ctx.slider);
  pNdviUniform = gl.getUniformLocation(ctx.shaderProgram, "uNdvi");
  gl.uniform1f(pNdviUniform, (ctx.mode === "ndvi" ? 1.0 : 0.0));
  pGreyscaleUniform = gl.getUniformLocation(ctx.shaderProgram, "uGreyscale");
  gl.uniform1f(pGreyscaleUniform, (ctx.greyscale ? 1.0 : 0.0));
  pHsvUniform = gl.getUniformLocation(ctx.shaderProgram, "uHsv");
  gl.uniform1f(pHsvUniform, (ctx.mode === "hsv" ? 1.0 : 0.0));
  pColormap = gl.getUniformLocation(ctx.shaderProgram, "uColormap");
  gl.uniform1f(pColormap, (ctx.colormap ? 1.0 : 0.0));
  gl.drawArrays(gl.TRIANGLES, 0, 6);
  if (returnImage) {
    return ctx.canvas.toDataURL("image/png");
  }
};

generateShader = function(ctx, r, g, b) {
  var code;
  r = r.toLowerCase().replace(/h/g, "r").replace(/s/g, "g").replace(/v/g, "b");
  g = g.toLowerCase().replace(/h/g, "r").replace(/s/g, "g").replace(/v/g, "b");
  b = b.toLowerCase().replace(/h/g, "r").replace(/s/g, "g").replace(/v/g, "b");
  r = r.replace(/[^xrgb\/\-\+\*\(\)\.0-9]*/g, "");
  g = g.replace(/[^xrgb\/\-\+\*\(\)\.0-9]*/g, "");
  b = b.replace(/[^xrgb\/\-\+\*\(\)\.0-9]*/g, "");
  r = r.replace(/([0-9])([^\.])?/g, "$1.0$2");
  g = g.replace(/([0-9])([^\.])?/g, "$1.0$2");
  b = b.replace(/([0-9])([^\.])?/g, "$1.0$2");
  if (r === "") {
    r = "r";
  }
  if (g === "") {
    g = "g";
  }
  if (b === "") {
    b = "b";
  }
  code = $("#shader-fs-template").html();
  code = code.replace(/@1@/g, r);
  code = code.replace(/@2@/g, g);
  code = code.replace(/@3@/g, b);
  $("#shader-fs").html(code);
  return initShaders(ctx);
};

download = function(ctx) {
  var event, lnk;
  lnk = document.createElement("a");
  lnk.download = (new Date()).toISOString().replace(":", "_") + ".png";
  lnk.href = drawScene(ctx, true);
  if (document.createEvent) {
    event = document.createEvent("MouseEvents");
    event.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    return lnk.dispatchEvent(event);
  } else if (lnk.fireEvent) {
    return lnk.fireEvent("onclick");
  }
};


















setMode = function(ctx, newMode) {
  ctx.mode = newMode;
  $("#download").show();
  if (ctx.mode === "ndvi") {
    $("#colorbar-container")[0].style.display = "inline-block";
    return $("#colormaps-group")[0].style.display = "inline-block";
  } else {
    $("#colorbar-container")[0].style.display = "none";
    return $("#colormaps-group")[0].style.display = "none";
  }
};

handleLoadedTexture = function(ctx) {
  var gl;
  gl = ctx.gl;
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, ctx.texture);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, ctx.image);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  setMode(ctx, "raw");
  generateShader(ctx, "r", "g", "b");
  return drawScene(ctx);
};

initTexture = function(ctx, fileObject) {
  ctx.texture = ctx.gl.createTexture();
  ctx.image = new Image();
  ctx.image.onload = function() {
    return handleLoadedTexture(ctx);
  };
  return ctx.image.src = fileObject;
};

$(window).load(function() {
  $("#shader-vs").load("shader.vert");
  $("#shader-fs-template").load("shader.frag");
  img_context = createContext("raw", true, false, 1.0, "canvas-image");
  return map_context = createContext("ndvi", true, true, 1.0, "colorbar");
});

$(document).ready(function() {
  $("#file-sel").change(function() {
    var reader;
    if (this.files && this.files[0]) {
      reader = new FileReader();
      reader.onload = function(eventObject) {
        initTexture(img_context, eventObject.target.result);
        return generateShader(map_context, "r", "g", "b");
      };
      return reader.readAsDataURL(this.files[0]);
    }
  });
  $('a#raw').click(function() {
    setMode(img_context, "raw");
    generateShader(img_context, "r", "g", "b");
    return drawScene(img_context);
  });
  $('a#ndvi').click(function() {
    setMode(img_context, "ndvi");
    generateShader(img_context, "((-(b-r)/(r+b))+1)/2", "((-(b-r)/(r+b))+1)/2", "((-(b-r)/(r+b))+1)/2");
    drawScene(img_context);
    return drawScene(map_context);
  });
  $('a#nir').click(function() {
    setMode(img_context, "nir");
    generateShader(img_context, "r", "r", "r");
    return drawScene(img_context);
  });
 
   $('a#hsv-isolate').click(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, "((R-B)/(R+B))", " ", "1");
    drawScene(img_context);
    return drawScene(map_context);
  });
    $('a#hsv-red-emphasis').click(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, "(R-5*B)/(R+B)", " ", " ");
    drawScene(img_context);
    return drawScene(map_context);
  });
  $('a#hsv-active-area').click(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, "-(4*R-2*B)/(2*R+B)", " ", " ");
    drawScene(img_context);
    return drawScene(map_context);
  });
 $('a#hsv-red-highlight').click(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, "(-(6*R-B)/(2*R+2*B))", " ", " ");
    drawScene(img_context);
    return drawScene(map_context);
  });
 $('a#hsv-diff-emphasized').click(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, "4*(R-B)/(R+B)  ", " ", " ");
    drawScene(img_context);
    return drawScene(map_context);
  });


$('a#mono-illuminate').click(function() {
    setMode(img_context, "mono");
    generateShader(img_context, "((R+G)-(2*B))/((R+G)+(B)) ", " ((R+G)-(2*B))/((R+G)+(B)) ", " ((R+G)-(2*B))/((R+G)+(B)) ");
    drawScene(img_context);
    return drawScene(map_context);
  });
$('a#mono-radiate').click(function() {
    setMode(img_context, "mono");
    generateShader(img_context, "(((R-B)/(R+B))+1/2)", "(((R-B)/(R+B))+1/2)", "(((R-B)/(R+B))+1/2)");
    drawScene(img_context);
    return drawScene(map_context);
  });
$('a#mono-isolate').click(function() {
    setMode(img_context, "mono");
    generateShader(img_context, "(R-B)/(R+B)", "(R-B)/(R+B) ", "(R-B)/(R+B)");
    drawScene(img_context);
    return drawScene(map_context);
  });
$('a#mono-highlight').click(function() {
    setMode(img_context, "mono");
    generateShader(img_context, "4*(R-B)/(R+B)", "4*(R-B)/(R+B)", "4*(R-B)/(R+B)");
    drawScene(img_context);
    return drawScene(map_context);
  });
$('a#mono-black-white').click(function() {
    setMode(img_context, "mono");
    generateShader(img_context, "9*(R-B)/(R+B)", " 9*(R-B)/(R+B)", "9*(R-B)/(R+B)");
    drawScene(img_context);
    return drawScene(map_context);
  });

  $('#download').click(function() {
    return download(img_context);
  });
  $('#infragrammar_hsv').submit(function() {
    setMode(img_context, "hsv");
    generateShader(img_context, $('#h_exp').val(), $('#s_exp').val(), $('#v_exp').val());
    return drawScene(img_context);
  });
  $('#infragrammar').submit(function() {
    setMode(img_context, "rgb");
    generateShader(img_context, $('#r_exp').val(), $('#g_exp').val(), $('#b_exp').val());
    return drawScene(img_context);
  });
  $('#infragrammar_mono').submit(function() {
    setMode(img_context, "mono");
    generateShader(img_context, $('#m_exp').val(), $('#m_exp').val(), $('#m_exp').val());
    return drawScene(img_context);
  });
  $('button#grey').click(function() {
    img_context.greyscale = true;
    drawScene(img_context);
    map_context.greyscale = true;
    return drawScene(map_context);
  });
  $('button#color').click(function() {
    img_context.greyscale = false;
    drawScene(img_context);
    map_context.greyscale = false;
    return drawScene(map_context);
  });
  return $('#slider').slider().on('slide', function(event) {
    img_context.slider = event.value / 100.0;
    return drawScene(img_context);
  });
});
